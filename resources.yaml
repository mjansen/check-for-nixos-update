AWSTemplateFormatVersion: "2010-09-09"

Parameters:

  SourceCode:
    Type: String
    Default: 'check_for_nixos_update'
    AllowedValues:
      - 'check_for_nixos_update'
    Description: "name of the source file"

Resources:

  MyBucket:
    Type: AWS::S3::Bucket

  MyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "AccessToConfigInS3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "s3:GetObject"
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref MyBucket
                      - "/config.yaml"
              - Effect: "Allow"
                Action: [ "s3:GetObject", "s3:PutObject" ]
                Resource: "arn:aws:s3:::*/lastRelease"
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref MyBucket
                      - "/lastRelease"

  MyFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref MyBucket
        S3Key: "__VERSION__.zip"
      Description: "Check the current NIXOS Release for a given version and update an S3 file"
      Handler:
        Fn::Join:
          - "."
          - - !Ref "SourceCode"
            - "my_handler"
      Environment:
        Variables:
          "BUCKET_NAME": !Ref MyBucket
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "MyRole"
          - "Arn"
      Runtime: "python3.6"
      Timeout: 60

  MyFunctionPermissionCWE:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt [ "MyFunction", "Arn" ]
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt [ "MyCronEvent", "Arn" ]

  MyCronEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: 'Trigger the execution of the lambda'
      ScheduleExpression: "cron(7 * * * ? *)"
      Targets:
        - Arn: !GetAtt [ "MyFunction", "Arn" ]
          Id: "check-for-nixos-update"

Outputs:
  StackVersion:
    Value: "__VERSION__"
    Description: "The current version of this cloudformation stack, computed from the source files"
  StackBucket:
    Value: !Ref MyBucket
    Description: "Bucket that stores the last seen nixos release"
  StackLambda:
    Value: !Ref MyFunction
    Description: "The function to invoke to run the nixos update check"
  StackLambdaCode:
    Value: !Ref SourceCode
    Description: "stem of source file for the handler"
  StackLambdaDependencies:
    Value: "pyyaml certifi urllib3"
    Description: "additional python3 modules for this lambda, used in deployment"
